<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="AdminMapper">

	<sql id="select">
		SELECT C_KEY, C_NAME, C_OWNER, C_ADDRESS, C_LOGO, C_SIGN, C_QRCODE, C_MILEAGE, C_CLOSEDAY, C_LEVEL
		FROM COMPANY
	</sql>

	<select id="selectEmployeeCount" resultType="EmployeeVo">
		SELECT C_KEY_FK,COUNT(*) AS "COUNTS" 
		FROM EMPLOYEE 
		GROUP BY C_KEY_FK
	</select>

	<select id="selectCompanyList" resultType="Company">
		SELECT C_KEY, C_NAME, C_OWNER, C_ADDRESS, C_MILEAGE, C_CLOSEDAY, C_LEVEL, COUNTS
		FROM (SELECT C_KEY_FK,COUNT(*) AS "COUNTS"
			      FROM EMPLOYEE
			      GROUP BY C_KEY_FK)
		RIGHT JOIN COMPANY ON (C_KEY = C_KEY_FK)
		WHERE C_LEVEL != 0
	</select>
	
	<select id="selectCompanySetList" resultType="Company">
		SELECT C_KEY, C_NAME, C_OWNER, C_ADDRESS, C_MILEAGE, C_CLOSEDAY, C_LEVEL, COUNTS
		FROM (SELECT C_KEY_FK,COUNT(*) AS "COUNTS"
			      FROM EMPLOYEE
			      GROUP BY C_KEY_FK)
		RIGHT JOIN COMPANY ON (C_KEY = C_KEY_FK)
		WHERE C_LEVEL = 0
	</select>
	
	<update id="updateCompanyLevel" parameterType="Company">
		UPDATE COMPANY
		SET C_LEVEL = #{cLevel}
		WHERE C_KEY = #{cKey}
	</update>
	
	
	<select id="selectAllCompanyCount" resultType="Integer">
		SELECT COUNT(*) AS "COUNTS"
		FROM COMPANY
		WHERE C_LEVEL != 0
	</select>
	
	<select id="selectCountLevel1" resultType="Integer">
		SELECT COUNT(*) AS "COUNTS"
		FROM COMPANY
		WHERE C_LEVEL = 1
	</select>
	
	<select id="selectCountLevel2" resultType="Integer">
		SELECT COUNT(*) AS "COUNTS"
		FROM COMPANY
		WHERE C_LEVEL = 2
	</select>
	
	<select id="selectCountLevel3" resultType="Integer">
		SELECT COUNT(*) AS "COUNTS"
		FROM COMPANY
		WHERE C_LEVEL = 3
	</select>
	
	<select id="selectMarkList" resultType="Company">
		SELECT COORD_KEY_FK, CITY, LAT, LNG, COUNTS
		FROM (SELECT COORD_KEY_FK, COUNT(*) AS "COUNTS"
			        FROM COMPANY
			        WHERE C_LEVEL != 0
			        GROUP BY COORD_KEY_FK)
		JOIN COORDINATE ON(COORD_KEY_FK = COORD_KEY)
	</select>
	
	<select id="selectTop5List" resultType="Company">		
		SELECT CITY,COUNTS, PER
		FROM (SELECT COORD_KEY_FK, COUNT(*) AS "COUNTS", TRUNC(RATIO_TO_REPORT(COUNT(*)) OVER() * 100) AS "PER"
		      FROM COMPANY
		      WHERE C_LEVEL != 0
		      GROUP BY COORD_KEY_FK
		      ORDER BY COUNTS DESC)
		JOIN COORDINATE ON(COORD_KEY_FK = COORD_KEY)
		WHERE ROWNUM <![CDATA[ <= ]]>5
	</select>
	
	<select id="selectCalList" resultType="Company">
		SELECT C_NAME
		FROM COMPANY
		WHERE C_CLOSEDAY = #{dateList} AND ROWNUM <![CDATA[ <= ]]> 6 AND C_LEVEL != 0
		ORDER BY C_NAME ASC
	</select>
	
	<select id="selectNowCalList" resultType="Company">
		SELECT C_NAME, C_CLOSEDAY
		FROM COMPANY
		WHERE C_CLOSEDAY = TO_DATE(TO_CHAR(SYSDATE, 'MM/DD/YYYY'), 'MM/DD/YYYY') AND ROWNUM <![CDATA[ <= ]]> 6 AND C_LEVEL != 0
		ORDER BY C_NAME ASC
	</select>
	
	<select id="selectCompanyIdCheck" resultType="EmployeeVo">
		SELECT E_ID
		FROM EMPLOYEE
		WHERE E_ID = #{id}
	</select>
	
	<insert id="insertCompany" parameterType="Company">
		INSERT INTO COMPANY(C_KEY, C_NAME, C_OWNER, C_ADDRESS, C_LEVEL, COORD_KEY_FK)
		VALUES(SEQ_COMPANY.NEXTVAL, #{cName}, #{cOwner}, #{cAddress}, 0, (SELECT COORD_KEY FROM COORDINATE WHERE CITY = #{city}))
		<selectKey keyProperty="cKey" resultType="Integer" order="AFTER">
             SELECT SEQ_COMPANY.CURRVAL FROM dual 
      </selectKey>
	</insert>
	
	<insert id="insertEmployeeAdmin" parameterType="EmployeeVo">
		INSERT INTO EMPLOYEE(E_KEY, C_KEY_FK, E_TYPE, E_ID, E_PWD)
		VALUES(SEQ_EMPLOYEE.NEXTVAL, #{cKeyFk},1, #{eId}, #{ePwd})
	</insert>
	
	<select id="selectCompanyPayment" resultType="Company">
		SELECT C_KEY,C_NAME, C_OWNER,COUNTS
		FROM (SELECT C_KEY_FK,COUNT(*) AS "COUNTS"
			      FROM EMPLOYEE
			      GROUP BY C_KEY_FK)
		RIGHT JOIN COMPANY ON (C_KEY = C_KEY_FK)
		WHERE C_KEY = #{cKeyFk}
	</select>
	
	<insert id="insertCompanyPaymentP" parameterType="PaymentVo">
		INSERT INTO PAYMENT
		VALUES(SEQ_PAYMENT.NEXTVAL,#{cKeyFk},#{payMileage}, SYSDATE, #{payVoucher})
	</insert>
	
	<update id="insertCompanyPaymentC" parameterType="Company">
		UPDATE COMPANY
		SET C_MILEAGE = #{cMileage}, C_CLOSEDAY = TO_DATE(TO_CHAR(SYSDATE + #{payVoucher}, 'MM/DD/YYYY'), 'MM/DD/YYYY'), C_LEVEL = #{cLevel}
		WHERE C_KEY = #{cKey}
	</update>
	
	<select id="selectMonthSumSales" resultType="PaymentVo">
		SELECT TO_CHAR(P.PAY_DATE,'MM') AS "ALLMONTH",SUM(P.PAY_MILEAGE) AS "SUMSALES"
		FROM PAYMENT P
		JOIN COMPANY C ON (P.C_KEY_FK = C.C_KEY)
		WHERE TO_CHAR(P.PAY_DATE,'YYYYMM') BETWEEN '201801' AND '201812' 
		GROUP BY TO_CHAR(P.PAY_DATE,'MM')
		ORDER BY TO_CHAR(P.PAY_DATE,'MM') ASC
	</select>
	
	<select id="selectLevelCountPer" resultType="PaymentVo">
		SELECT PAY_VOUCHER,COUNT(*) AS "COUNT", (SELECT COUNT(*)FROM PAYMENT) AS "ALLCOUNT", TRUNC(RATIO_TO_REPORT(COUNT(*)) OVER() * 100) AS "PER"
		FROM PAYMENT
		GROUP BY PAY_VOUCHER
		ORDER BY PAY_VOUCHER
	</select>
	
	<select id="selectMonthSumLevel" resultType="PaymentVo">
		SELECT TO_CHAR(OP.PAY_DATE,'MM')  AS "ALLMONTH",
		NVL((SELECT SUM(PAY_MILEAGE)
				FROM PAYMENT P
				JOIN COMPANY C ON (P.C_KEY_FK = C.C_KEY)
				WHERE C.C_LEVEL = 1 AND TO_CHAR(P.PAY_DATE,'MM') = TO_CHAR(OP.PAY_DATE,'MM')), 0) AS LEVEL1,
		NVL((SELECT SUM(PAY_MILEAGE)
				FROM PAYMENT P
				JOIN COMPANY C ON (P.C_KEY_FK = C.C_KEY)
				WHERE C.C_LEVEL = 2 AND TO_CHAR(P.PAY_DATE,'MM') = TO_CHAR(OP.PAY_DATE,'MM')), 0) AS LEVEL2,
		NVL((SELECT SUM(PAY_MILEAGE)
				FROM PAYMENT P
				JOIN COMPANY C ON (P.C_KEY_FK = C.C_KEY)
				WHERE C.C_LEVEL = 3 AND TO_CHAR(P.PAY_DATE,'MM') = TO_CHAR(OP.PAY_DATE,'MM')), 0) AS LEVEL3
		FROM PAYMENT OP
		GROUP BY TO_CHAR(OP.PAY_DATE,'MM')
		ORDER BY TO_CHAR(OP.PAY_DATE,'MM')
	</select>
	
	<select id="selectAllCount" resultType="PaymentVo">
		SELECT COUNT(*) AS "COUNT"
		FROM PAYMENT
	</select>
	
	<select id="selectCompanyPaymentList" resultType="Company">
		SELECT C_LEVEL, C_NAME, C_OWNER, PAY_DATE, PAY_MILEAGE, PAY_VOUCHER
		FROM COMPANY
		JOIN PAYMENT ON (C_KEY = C_KEY_FK)
	</select>

</mapper>