<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="EmployeeMapper">


	<sql id="select">
		SELECT E_KEY ,
		E_NO ,
		C_KEY_FK ,
		E_TYPE ,
		E_ID ,
		E_PWD ,
		E_NAME ,
		E_JOBCODE_FK ,
		E_DEPART_FK ,
		E_ADDRESS ,
		E_EXTEN ,
		E_PHONE ,
		E_EMAIL ,
		E_HIRE_DATE ,
		E_ENT_DATE ,
		E_ENT_YN ,
		E_PHOTO
		FROM EMPLOYEE
	</sql>

	<!-- <resultMap type="EmployeeVo" id="EmployeeMap"> <result property="eId" 
		column="ID" /> <result property="department" column="DEPARTMENT" /> <result 
		property="job" column="JOB" /> <result property="eName" column="NAME" /> 
		<result property="eExten" column="EXTEN" /> <result property="ePhone" column="PHONE" 
		/> <result property="eHireDate" column="HIREDATE" /> <result property="eDepartFk" 
		column="DEPARTKEY" /> <result property="eJobcodeFk" column="JOBKEY" /> <result 
		property="eKey" column="EKEY" /> <result property="eNo" column="ENO" /> <result 
		property="eEmail" column="EMAIL" /> <result property="ePhoto" column="PHOTO" 
		/> </resultMap> -->

	<resultMap type="EmployeeVo" id="EmployeeMap">
		<id property="eKey" column="E_KEY" />
		<result property="eNo" column="E_NO" />
		<result property="cKeyFk" column="C_KEY_FK" />
		<result property="eType" column="E_TYPE" />
		<result property="eId" column="E_ID" />
		<result property="ePwd" column="E_PWD" />
		<result property="eName" column="E_NAME" />
		<result property="eJobcodeFk" column="E_JOBCODE_FK" />
		<result property="eDepartFk" column="E_DEPART_FK" />
		<result property="eAddress" column="E_ADDRESS" />
		<result property="eExten" column="E_EXTEN" />
		<result property="ePhone" column="E_PHONE" />
		<result property="eEmail" column="E_EMAIL" />
		<result property="eBirth" column="E_BIRTH" />
		<result property="eHireDate" column="E_HIRE_DATE" />
		<result property="eEntDate" column="E_ENT_DATE" />
		<result property="eEntYn" column="E_ENT_YN" />
		<result property="ePhoto" column="E_PHOTO" />
		<result property="eInstead" column="E_INSTEAD" />
		<result property="eState" column="E_STATE" />
		<result property="job" column="JOB" />
		<result property="department" column="DEPARTMENT" />
		<result property="divInfolevel" column="DIV_INFOLEVEL" />
		<result property="cName" column="C_NAME" />
		<result property="cLevel" column="C_LEVEL" />
		<association property="instead" javaType="EmployeeVo">
			<id property="eKey" column="INSTEAD_KEY" />
			<result property="eName" column="INSTEAD_NAME" />
			<result property="job" column="INSTEAD_JOB" />
			<result property="divInfolevel" column="INSTEAD_INFOLEVEL" />
			<result property="department" column="INSTEAD_DEPART" />
		</association>
	</resultMap>

	<select id="selectEmployeeById" parameterType="string"
		resultMap="EmployeeMap">
		SELECT
		E.E_KEY,E.E_NO,E.C_KEY_FK,E.E_TYPE,E.E_ID,E.E_PWD,E.E_NAME,E.E_JOBCODE_FK,E.E_DEPART_FK,E.E_ADDRESS
		,E.E_EXTEN, E.E_PHONE,E.E_EMAIL,
		E.E_HIRE_DATE,E.E_ENT_DATE,E.E_ENT_YN,E.E_PHOTO, E.E_BIRTH,
		E.E_INSTEAD,E.E_STATE
		,J.DIV_INFO AS "JOB", D.DIV_INFO AS "DEPARTMENT"
		,J.DIV_INFOLEVEL
		, EI.E_KEY AS INSTEAD_KEY, EI.E_NAME AS INSTEAD_NAME,
		EJ.DIV_INFO AS
		"INSTEAD_JOB",
		ED.DIV_INFO AS "INSTEAD_DEPART",
		C.C_LEVEL,C.C_NAME
		FROM EMPLOYEE E
		LEFT JOIN
		DIVISION J ON(E.E_JOBCODE_FK
		= J.DIV_KEY)
		LEFT JOIN
		DIVISION D
		ON(E.E_DEPART_FK = D.DIV_KEY)
		LEFT JOIN
		EMPLOYEE EI
		ON(EI.E_KEY =
		E.E_INSTEAD)
		LEFT JOIN DIVISION EJ
		ON(EI.E_JOBCODE_FK = EJ.DIV_KEY)
		LEFT JOIN DIVISION ED
		ON(EI.E_DEPART_FK = ED.DIV_KEY)
		LEFT JOIN COMPANY C ON(E.C_KEY_FK = C.C_KEY)
		WHERE E.E_ID = #{eId}
	</select>
	
	
	
	<select id="selectEmail" parameterType="string"  resultMap="EmployeeMap">
		SELECT
    	E_KEY, E_ID, E_EMAIL
		FROM EMPLOYEE
		WHERE E_EMAIL = 	#{eEmail}
	</select>
	

	<!-- 쪽지 직원 불러오는 쿼리문 -->
	<select id="selectEmployeeList" parameterType="int" resultType="EmployeeVo">
		SELECT
		E.E_KEY,E.E_NO,E.C_KEY_FK,E.E_TYPE,E.E_ID,E.E_NAME,E.E_JOBCODE_FK,E.E_DEPART_FK,E.E_ADDRESS
		,E.E_EXTEN, E.E_PHONE,E.E_EMAIL,
		E.E_HIRE_DATE,E.E_ENT_DATE,E.E_ENT_YN,E.E_PHOTO
		,J.DIV_INFO AS "JOB",
		D.DIV_INFO AS "DEPARTMENT"
		FROM EMPLOYEE E
		JOIN DIVISION J
		ON(E.E_JOBCODE_FK = J.DIV_KEY)
		JOIN DIVISION D ON(E.E_DEPART_FK =
		D.DIV_KEY)
		WHERE E.C_KEY_FK = #{companyK}
	</select>

	<!-- 부서 불러오기 -->
	<select id="selectDepartment" parameterType="int" resultType="EmployeeVo">
		SELECT D.DIV_INFO AS "DEPARTMENT"
		FROM EMPLOYEE E
		JOIN DIVISION J
		ON(E.E_JOBCODE_FK = J.DIV_KEY)
		JOIN DIVISION D ON(E.E_DEPART_FK =
		D.DIV_KEY)
		WHERE E.C_KEY_FK = #{compnayK}
		GROUP BY D.DIV_INFO
	</select>

	<!-- 쪽지 직원 불러오는 쿼리문 끝 -->

	<!-- 사원등록 -->
	<insert id="insertEmployee" parameterType="EmployeeVo">
		INSERT INTO EMPLOYEE
		(E_KEY, E_NO, C_KEY_FK, E_TYPE, E_ID, E_PWD,
		E_NAME, E_JOBCODE_FK ,
		E_DEPART_FK ,E_ADDRESS, E_EXTEN, E_PHONE, E_EMAIL,
		E_BIRTH,
		E_HIRE_DATE, E_PHOTO)
		VALUES (SEQ_EMPLOYEE.NEXTVAL, #{eNo}, #{cKeyFk},
		'2' , #{eId}, #{ePwd},
		#{eName}, #{eJobcodeFk}, #{eDepartFk},
		#{eAddress} , #{eExten}, #{ePhone},
		#{eEmail},
		#{eBirth}, #{eHireDate},
		#{ePhoto} )
	</insert>

	<!-- 사원등록 아이디 유효성 검사 -->
	<select id="empAddIdCheck" parameterType="EmployeeVo"
		resultType="int">
		SELECT
		COUNT(*)
		FROM EMPLOYEE
		WHERE E_ID = #{eId} AND C_KEY_FK = #{cKeyFk}


	</select>

	<!-- 사원등록 사원번호 유효성 검사 -->
	<select id="empNoCheck" parameterType="EmployeeVo" resultType="int">
		SELECT
		COUNT(*)
		FROM EMPLOYEE
		WHERE E_NO = #{eNo} AND C_KEY_FK = #{cKeyFk}


	</select>




	<update id="updateEmployee" parameterType="EmployeeVo">
		UPDATE EMPLOYEE
		SET E_NO = #{eNo},
		E_ID = #{eId},
		E_PWD = #{ePwd},
		E_NAME = #{eName},
		E_JOBCODE_FK = #{eJobcodeFk},
		E_DEPART_FK = #{eDepartFk},
		E_ADDRESS = #{eAddress},
		E_EXTEN = #{eExten},
		E_PHONE = #{ePhone},
		E_EMAIL = #{eEmail},
		E_BIRTH = #{eBirth},
		E_HIRE_DATE = #{eHireDate},
		E_ENT_DATE = #{eEntDate},
		<choose>
			<when test="eEntDate !=null">
				E_ENT_YN = 'Y',
			</when>
			<when test="eEntDate ==null">
				E_ENT_YN = 'N',
			</when>
		</choose>
		E_PHOTO = #{ePhoto}
		WHERE E_KEY = #{eKey}
	</update>




	<!-- 조직도 select 사원 리스트 출력 쿼리문 -->

	<select id="selectEmployeeList2" resultMap="EmployeeMap"
		parameterType="int">
		SELECT E.E_KEY E_KEY,
		E.E_NO E_NO,
		E.C_KEY_FK C_KEY_FK,
		E.E_TYPE E_TYPE,
		E.E_ID E_ID,
		E.E_PWD E_PWD,
		E.E_NAME E_NAME,
		E.E_JOBCODE_FK E_JOBCODE_FK,
		E.E_DEPART_FK E_DEPART_FK,
		E.E_ADDRESS
		E_ADDRESS,
		E.E_EXTEN E_EXTEN,
		E.E_PHONE E_PHONE,
		E.E_EMAIL E_EMAIL,
		E.E_BIRTH E_BIRTH,
		E.E_HIRE_DATE E_HIRE_DATE,
		E.E_ENT_DATE E_ENT_DATE,
		E.E_ENT_YN E_ENT_YN,
		E.E_PHOTO E_PHOTO,
		E.E_STATE,
		J.DIV_INFO JOB,
		J.DIV_INFOLEVEL,
		D.DIV_INFO DEPARTMENT,
		EI.E_KEY AS
		INSTEAD_KEY,
		EI.E_NAME AS INSTEAD_NAME, IJ.DIV_INFO AS "INSTEAD_JOB",
		IJ.DIV_INFOLEVEL AS "INSTEAD_INFOLEVEL",
		ID.DIV_INFO AS
		"INSTEAD_DEPART"
		FROM EMPLOYEE E
		JOIN DIVISION J ON(E.E_JOBCODE_FK
		=
		J.DIV_KEY)
		JOIN DIVISION D ON(E.E_DEPART_FK = D.DIV_KEY)
		LEFT JOIN
		EMPLOYEE EI ON (E.E_INSTEAD=EI.E_KEY)
		LEFT JOIN DIVISION IJ ON
		(EI.E_JOBCODE_FK=IJ.DIV_KEY)
		LEFT JOIN DIVISION ID ON
		(EI.E_DEPART_FK=ID.DIV_KEY)
		WHERE
		E.C_KEY_FK =#{cKey}
		ORDER BY
		E_DEPART_FK ASC , J.DIV_INFOLEVEL ASC,E.E_NAME
	</select>


	<!-- 사원등록 직급정보 출력 쿼리문 -->
	<select id="selectJobList" parameterType="int" resultMap="EmployeeMap">
		SELECT
		DIV_INFO AS "JOB",
		DIV_KEY AS"E_JOBCODE_FK",
		DIV_INFOLEVEL DIV_INFOLEVEL
		FROM DIVISION
		WHERE DIV_TYPE
		=2 AND C_KEY_FK = #{cKey} ORDER BY DIV_INFOLEVEL

	</select>

	<!-- 사원등록 부서정보 출력 쿼리문 -->
	<select id="selectDepartList" parameterType="int" resultMap="EmployeeMap">
		SELECT
		DIV_INFO AS
		"DEPARTMENT" ,
		DIV_KEY AS"E_DEPART_FK",
		DIV_INFOLEVEL DIV_INFOLEVEL
		FROM DIVISION
		WHERE DIV_TYPE =1 AND C_KEY_FK = #{cKey}
		ORDER BY DIV_KEY ASC
	</select>

	<select id="selectEmployeeListByKey" parameterType="ArrayList"
		resultType="EmployeeVo">
		SELECT
		E.E_KEY,E.E_NO,E.C_KEY_FK,E.E_TYPE,E.E_ID,E.E_NAME,E.E_JOBCODE_FK,E.E_DEPART_FK,E.E_ADDRESS
		,E.E_EXTEN, E.E_PHONE,E.E_EMAIL,
		E.E_HIRE_DATE,E.E_ENT_DATE,E.E_ENT_YN,E.E_PHOTO,E.E_STATE
		,J.DIV_INFO
		AS "JOB",
		D.DIV_INFO AS "DEPARTMENT"
		FROM EMPLOYEE E
		JOIN DIVISION J
		ON(E.E_JOBCODE_FK = J.DIV_KEY)
		JOIN DIVISION D ON(E.E_DEPART_FK =
		D.DIV_KEY)
		WHERE E.E_KEY IN
		<foreach item="parameter" index="index" collection="array"
			open="(" separator="," close=")">
			#{parameter}
		</foreach>
		ORDER BY J.DIV_INFOLEVEL DESC,E.E_NAME DESC
	</select>

	<!-- 조직도 select 사원정보 팝업창 출력 쿼리문 -->
	<select id="selectEmployeeInfo" parameterType="int" resultMap="EmployeeMap">
		SELECT
		E.E_KEY AS "E_KEY",
		E.E_NO AS "E_NO",
		E.E_ID AS "E_ID",
		D.DIV_INFO AS "DEPARTMENT",
		J.DIV_INFO AS "JOB",
		E.E_NAME AS
		"E_NAME",
		E.E_EXTEN AS "E_EXTEN",
		E.E_PHONE AS "E_PHONE",
		E.E_HIRE_DATE
		AS "E_HIRE_DATE",
		E.E_BIRTH AS "E_BIRTH",
		E.E_ENT_DATE AS "E_ENT_DATE",
		D.DIV_KEY AS "E_DEPART_FK",
		J.DIV_KEY AS
		"E_JOBCODE_FK",
		E.E_ADDRESS AS "E_ADDRESS",
		E.E_EMAIL AS "E_EMAIL",
		E.E_PHOTO AS "E_PHOTO"

		FROM
		EMPLOYEE E
		JOIN DIVISION J
		ON(E.E_JOBCODE_FK = J.DIV_KEY)
		JOIN DIVISION D
		ON(E.E_DEPART_FK =
		D.DIV_KEY)
		WHERE E.E_KEY = #{eKey}
	</select>

	<select id="selectTodayBList" parameterType="int" resultType="EmployeeVo">
		SELECT E.E_NAME,D.DIV_INFO AS "DEPARTMENT",E.E_BIRTH,E.E_PHOTO
		FROM
		EMPLOYEE E
		JOIN DIVISION D ON(E.E_DEPART_FK = D.DIV_KEY)
		WHERE
		E.C_KEY_FK = #{cKey} AND TO_CHAR(E_BIRTH,'MM/DD') =
		TO_CHAR(SYSDATE,'MM/DD')
	</select>

	<select id="selectDepartCountList" parameterType="int"
		resultType="EmployeeVo">
		SELECT D.DIV_INFO AS "DEPARTMENT" ,COUNT(*) AS "COUNT"
		FROM
		EMPLOYEE E
		JOIN DIVISION D ON(E.E_DEPART_FK= D.DIV_KEY)
		GROUP BY
		D.DIV_INFO
	</select>

	<update id="updateInstead" parameterType="EmployeeVo">
		UPDATE EMPLOYEE
		SET
		E_INSTEAD = #{eInstead}
		WHERE E_KEY=#{eKey}
	</update>

	<update id="updateState" parameterType="EmployeeVo">
		UPDATE EMPLOYEE
		SET E_STATE = #{eState}
		WHERE E_KEY = #{eKey}
	</update>
	
	<!-- 임시 비밀번호 발급 -->
	<update id="updatePwd" parameterType="EmployeeVo">
		UPDATE EMPLOYEE
		SET E_STATE = #{eState}
		WHERE E_KEY = #{eKey}
	</update>


	<select id="sessionSelect" parameterType="EmployeeVo" resultMap="EmployeeMap">
		SELECT
		E.E_KEY,E.E_NO,E.C_KEY_FK,E.E_TYPE,E.E_ID,E.E_PWD,E.E_NAME,E.E_JOBCODE_FK,E.E_DEPART_FK,E.E_ADDRESS
		,E.E_EXTEN, E.E_PHONE,E.E_EMAIL,
		E.E_HIRE_DATE,E.E_ENT_DATE,E.E_ENT_YN,E.E_PHOTO, E.E_BIRTH,
		E.E_INSTEAD,E.E_STATE
		,J.DIV_INFO AS "JOB", D.DIV_INFO AS "DEPARTMENT"
		,J.DIV_INFOLEVEL
		, EI.E_KEY AS INSTEAD_KEY, EI.E_NAME AS INSTEAD_NAME, EJ.DIV_INFO AS
		"INSTEAD_JOB",
		ED.DIV_INFO AS "INSTEAD_DEPART",
		C.C_LEVEL,C.C_NAME
		FROM EMPLOYEE E
		LEFT JOIN
		DIVISION J ON(E.E_JOBCODE_FK = J.DIV_KEY)
		LEFT JOIN DIVISION D
		ON(E.E_DEPART_FK = D.DIV_KEY)
		LEFT JOIN EMPLOYEE EI ON(EI.E_KEY =
		E.E_INSTEAD)
		LEFT JOIN DIVISION EJ ON(EI.E_JOBCODE_FK = EJ.DIV_KEY)
		LEFT JOIN DIVISION ED ON(EI.E_DEPART_FK = ED.DIV_KEY)
		LEFT JOIN COMPANY C ON(E.C_KEY_FK = C.C_KEY)
		WHERE E.E_KEY =#{eKey}
	</select>
	
	
	<delete id="deleteDivision" parameterType="int">
		DELETE FROM DIVISION WHERE DIV_KEY=#{divKey}
	</delete>
	
	<insert id="insertDepartment" parameterType="DivisionVo">
		MERGE INTO DIVISION DIV
            USING DUAL
            ON (DIV_INFOLEVEL=#{divInfolevel} AND C_KEY_FK=#{cKeyFk} AND DIV_TYPE=1)
            WHEN MATCHED THEN
                      UPDATE SET
                      	DIV_KEY=#{divKey},
                        DIV_INFO=#{divInfo}
            WHEN NOT MATCHED THEN
                     INSERT (DIV_KEY, C_KEY_FK, DIV_TYPE, DIV_INFO, DIV_INFOLEVEL) VALUES (SEQ_DIVISION.NEXTVAL,#{cKeyFk} , #{divType}, #{divInfo}, #{divInfolevel}
                     )
	</insert>
	
	<insert id="insertJob" parameterType="DivisionVo">
	MERGE INTO DIVISION DIV
            USING DUAL
            ON (DIV_KEY=#{divKey})
            WHEN MATCHED THEN
                      UPDATE SET
                        DIV_INFO=#{divInfo}
                        ,DIV_INFOLEVEL=#{divInfolevel}
            WHEN NOT MATCHED THEN
                     INSERT (DIV_KEY, C_KEY_FK, DIV_TYPE, DIV_INFO, DIV_INFOLEVEL) VALUES (SEQ_DIVISION.NEXTVAL,#{cKeyFk} , #{divType}, #{divInfo},#{divInfolevel}
                     )
	</insert>

</mapper>